@model CheckoutShippingAddressModel
@using Nop.Web.Models.Checkout;
@{
    Layout = "~/Views/Shared/_ColumnsOne.cshtml";

    //title
    Html.AddTitleParts(T("PageTitle.Checkout").Text);
    //page class
    Html.AppendPageCssClassParts("html-checkout-page");
    Html.AppendPageCssClassParts("html-shipping-address-page");
}
<div class="page checkout-page shipping-address-page">
    @Html.Action("CheckoutProgress", "Checkout", new { step = CheckoutProgressStep.Address })
    <div class="page-title">
        <h1>@T("Checkout.ShippingAddress")</h1>
    </div>
    <div class="page-body checkout-data">
        @using (Html.BeginRouteForm("CheckoutShippingAddress", FormMethod.Post))
        {
            if (Model.AllowPickUpInStore && !Model.PickUpInStoreOnly && Model.PickupPoints.Any())
            {
                    <div class="section pickup-in-store">
                    <div class="selector">
                        @Html.CheckBoxFor(x => x.PickUpInStore)
                        <label for="@Html.FieldIdFor(model => model.PickUpInStore)">@T("Checkout.PickupPoints").Text</label>
                    </div>
                    <div class="description">
                        @T("Checkout.PickupPoints.Description")
                    </div>
                    <script type="text/javascript">
                        $(document).ready(function () {
                            $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(togglePickUpInStore);
                            togglePickUpInStore();
                        });

                        function togglePickUpInStore() {
                            if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                                $('#pickup-points-form').show();
                                $('#shipping-addresses-form').hide();
                            } else {
                                $('#pickup-points-form').hide();
                                $('#shipping-addresses-form').show();
                            }
                        }
                    </script>
                </div>
            }

            if (Model.AllowPickUpInStore)
            {
                <div class="section pickup-points" id="pickup-points-form">
                    @if (Model.PickupPoints.Any())
                    {
                        if (Model.PickUpInStoreOnly)
                        { 
                            @Html.HiddenFor(x => x.PickUpInStore)
                        }
                        <div class="select-pickup-point">
                            @if (Model.PickupPoints.Count == 1)
                            {
                                var point = Model.PickupPoints.First();
                                @Html.Hidden("pickup-points-id", string.Format("{0}___{1}", point.Id, point.ProviderSystemName))
                                <ul>
                                    <li class="single-pickup-point name">@point.Name</li>
                                    <li class="single-pickup-point address">@(string.Format("{0} {1} {2} {3}", point.Address, point.City, point.StateName, point.CountryName))</li>
                                    @if (!string.IsNullOrEmpty(point.PickupFee))
                                    {
                                        <li class="single-pickup-point fee">@point.PickupFee</li>
                                    }
                                </ul>
                            }
                            else
                            {
                                <div class="title">
                                    <strong>@T("Checkout.PickupPoints.SelectPickupPoint")</strong>
                                </div>
                                <select name="pickup-points-id" id="pickup-points-select" class="address-select" title="">
                                    @foreach (var point in Model.PickupPoints)
                                    {
                                        var addressLine = new System.Text.StringBuilder();
                                        addressLine.Append(point.Name);
                                        if (!string.IsNullOrEmpty(point.Address))
                                        {
                                            addressLine.AppendFormat(", {0}", point.Address);
                                        }
                                        if (!string.IsNullOrEmpty(point.City))
                                        {
                                            addressLine.AppendFormat(", {0}", point.City);
                                        }
                                        if (!string.IsNullOrEmpty(point.StateName))
                                        {
                                            addressLine.AppendFormat(", {0}", point.StateName);
                                        }
                                        if (!string.IsNullOrEmpty(point.CountryName))
                                        {
                                            addressLine.AppendFormat(", {0}", point.CountryName);
                                        }
                                        if (!string.IsNullOrEmpty(point.PickupFee))
                                        {
                                            addressLine.AppendFormat(", {0}", point.PickupFee);
                                        }
                                        <option value="@(string.Format("{0}___{1}", point.Id, point.ProviderSystemName))">@(addressLine)</option>
                                    }
                                </select> 
                            }
                        </div>
                        if(Model.DisplayPickupPointsOnMap)
                        {
                            var src = string.Format("https://maps.googleapis.com/maps/api/js{0}", string.IsNullOrEmpty(Model.GoogleMapsApiKey) ? string.Empty : string.Format("?key={0}", Model.GoogleMapsApiKey));
                            <div class="pickup-points-map" id="map">
                                <script type="text/javascript">
                                    var markers = new Map();
                                    var googleMap = null;
                                    $(document).ready(function () {
                                        $.getScript("@src", function( data, textStatus, jqxhr ) {
                                            google.maps.visualRefresh = true;
                                            googleMap = new google.maps.Map(document.getElementById("map"), {
                                                zoom: 15,
                                                mapTypeId: google.maps.MapTypeId.ROADMAP
                                            });
                                            var geocoder = new google.maps.Geocoder();
                                            var infowindow = new google.maps.InfoWindow();
                                            @for (var i = 0; i < Model.PickupPoints.Count; i++)
                                            {
                                                var point = Model.PickupPoints[i];
                                                var value = string.Format("{0}___{1}", point.Id, point.ProviderSystemName);
                                                var pickupPointInfo = Html.Raw(string.Format(@"<div class='pickup-point-info'><ul><li><strong>{0}</strong></li><li>{1}</li><li>{2}</li></ul></div>",
                                                    point.Name, point.OpeningHours, point.PickupFee));
                                                if (point.Latitude != null && point.Longitude != null)
                                                {
                                                    <text>
                                                        (function() {
                                                            var marker = new google.maps.Marker({
                                                                map: googleMap,
                                                                title: "@point.Name",
                                                                position: new google.maps.LatLng(@point.Latitude, @point.Longitude),
                                                                icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                                            });
                                                            markers.set("@value", marker);
                                                            google.maps.event.addListener(marker, 'click', function () {
                                                                $('#pickup-points-select').val("@value")
                                                                infowindow.setContent("@pickupPointInfo");
                                                                infowindow.open(googleMap, marker);
                                                            });
                                                            @if (i == 0)
                                                            {
                                                                <text>googleMap.setCenter(marker.getPosition())</text>
                                                            }
                                                        }());
                                                    </text>
                                                }
                                                else
                                                {
                                                    var address = string.Format("{0} {1} {2} {3}", point.Address, point.City, point.ZipPostalCode, point.CountryName);
                                                    <text>
                                                        geocoder.geocode({'address': "@address"}, function(results, status) {
                                                            if (status === google.maps.GeocoderStatus.OK) {
                                                                var marker = new google.maps.Marker({
                                                                    map: googleMap,
                                                                    title: "@point.Name",
                                                                    position: results[0].geometry.location,
                                                                    icon: "http://maps.google.com/mapfiles/ms/icons/blue-dot.png"
                                                                });
                                                                markers.set("@value", marker);
                                                                google.maps.event.addListener(marker, 'click', function () {
                                                                    $('#pickup-points-select').val("@value")
                                                                    infowindow.setContent("@pickupPointInfo");
                                                                    infowindow.open(googleMap, marker);
                                                                });
                                                                @if (i == 0)
                                                                {
                                                                    <text>googleMap.setCenter(marker.getPosition())</text>
                                                                }
                                                            };
                                                        });
                                                    </text>
                                                }
                                            }
                                        
                                            $('#pickup-points-select').change(function() {
                                                new google.maps.event.trigger(markers.get(this.value), 'click' );
                                            });

                                            $("#@Html.FieldIdFor(model => model.PickUpInStore)").change(function() {
                                                if ($('#@Html.FieldIdFor(model => model.PickUpInStore)').is(':checked')) {
                                                    var center = googleMap.getCenter();
                                                    google.maps.event.trigger(googleMap, 'resize');
                                                    googleMap.setCenter(center);
                                                }
                                            })
                                        })
                                    })
                                </script>
                            </div>
                        }
                    }
                    <div class="message-error">
                        <ul>
                            @foreach (var warning in Model.Warnings)
                            {
                                <li>@warning</li>
                            }
                        </ul>
                    </div>
                </div>
            }

            if (!Model.PickUpInStoreOnly)
            {
                <div class="shipping-addresses" id="shipping-addresses-form">
                    @Html.Widget("checkout_shipping_address_top")
                    @if (Model.ExistingAddresses.Count > 0)
                    {
                        <div class="section select-shipping-address">
                            <div class="title">
                                <strong>@T("Checkout.SelectShippingAddress")</strong>
                            </div>
                            <div class="address-grid">
                                @foreach (var item in Model.ExistingAddresses)
                                {
                                    <div class="address-item">
                                        <ul class="address-box">
                                            <li class="name">
                                                @item.FirstName @item.LastName
                                            </li>
                                            <li class="email">
                                                <label>@T("Address.Fields.Email"):</label>
                                                <span>@item.Email</span>
                                            </li>
                                            @if (item.PhoneEnabled)
                                            {
                                                <li class="phone">
                                                    <label>@T("Address.Fields.PhoneNumber"):</label>
                                                    <span>@item.PhoneNumber</span>
                                                </li>
                                            }
                                            @if (item.FaxEnabled)
                                            {
                                                <li class="fax">
                                                    <label>@T("Address.Fields.FaxNumber"):</label>
                                                    <span>@item.FaxNumber</span>
                                                </li>
                                            }
                                            @if (item.CompanyEnabled && !String.IsNullOrEmpty(item.Company))
                                            {
                                                <li class="company">
                                                    @item.Company
                                                </li>
                                            }
                                            @if (item.StreetAddressEnabled)
                                            {
                                                <li class="address1">
                                                    @item.Address1
                                                </li>
                                            }
                                            @if (item.StreetAddress2Enabled && !String.IsNullOrEmpty(item.Address2))
                                            {
                                                <li class="address2">
                                                    @item.Address2
                                                </li>
                                            }
                                            @if (item.CityEnabled || item.StateProvinceEnabled || item.ZipPostalCodeEnabled)
                                            {
                                                <li class="city-state-zip">
                                                    @if (item.CityEnabled)
                                                    {
                                                        @item.City
                                                    }
                                                    @if (item.CityEnabled && (item.StateProvinceEnabled || item.ZipPostalCodeEnabled))
                                                    {
                                                        <text>,</text>
                                                    }
                                                    @if (item.StateProvinceEnabled)
                                                    {
                                                        @item.StateProvinceName
                                                    }
                                                    @if (item.ZipPostalCodeEnabled)
                                                    {
                                                        @item.ZipPostalCode
                                                    }
                                                </li>
                                            }
                                            @if (item.CountryEnabled && !String.IsNullOrEmpty(item.CountryName))
                                            {
                                                <li class="country">
                                                    @item.CountryName
                                                </li>
                                            }
                                            @if (!String.IsNullOrEmpty(item.FormattedCustomAddressAttributes))
                                            {
                                                <li class="custom-attributes-view">
                                                    @Html.Raw(item.FormattedCustomAddressAttributes)
                                                </li>
                                            }
                                        </ul>
                                        <div class="select-button">
                                            <input type="button" value="@T("Checkout.ShipToThisAddress")" class="button-1 select-shipping-address-button" onclick="setLocation('@Url.RouteUrl("CheckoutSelectShippingAddress", new { addressid = item.Id })') " />
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                    @Html.Widget("checkout_shipping_address_middle")
                    <div class="section new-shipping-address">
                        <div class="title">
                            @if (Model.ExistingAddresses.Count > 0)
                            {
                                <strong>@T("Checkout.OrEnterNewAddress")</strong>
                            }
                            else
                            {
                                <strong>@T("Checkout.EnterShippingAddress")</strong>
                            }
                        </div>
                        <div class="enter-address">
                            @{
                                var validationSummary = Html.ValidationSummary(true);
                            }
                            @if (!MvcHtmlString.IsNullOrEmpty(validationSummary))
                            {
                                <div class="message-error">@validationSummary</div>
                            }
                            @{
                                var dataDictAddress = new ViewDataDictionary();
                                //Merge ModelState (required for validation)
                                dataDictAddress.ModelState.Merge(ViewData.ModelState);
                                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "NewAddress";
                                @Html.Partial("_CreateOrUpdateAddress", Model.NewAddress, dataDictAddress)
                            }
                        </div>
                    </div>
                    @Html.Widget("checkout_shipping_address_bottom")
                </div>
            }
            <div class="buttons">
                <input type="submit" name="nextstep" value="@T("Checkout.NextButton")" class="button-1 new-address-next-step-button" />
            </div>
        }
        <div class="section order-summary">
            <div class="title">
                <strong>@T("Checkout.OrderSummary")</strong>
            </div>
            @Html.Action("OrderSummary", "ShoppingCart")
        </div>
    </div>
</div>
